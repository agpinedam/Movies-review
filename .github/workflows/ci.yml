name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'  

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test  # This will run all tests

  build:
    runs-on: ubuntu-latest
    needs: test  # Ensures the tests are successful before proceeding

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: movies
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set Docker Username
        run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build and tag Docker images
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Tag to use for a direct push to main
            TAG="${{ github.sha }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Tag with commit SHA for PRs
            TAG="${{ github.sha }}"
          fi
          docker-compose -f docker-compose.yml build
          docker tag ${DOCKER_USERNAME}/my-app:latest my-app:$TAG
        
      - name: Push Docker images
        run: docker-compose -f docker-compose.yml push

      - name: Logout from Docker Hub
        run: docker logout